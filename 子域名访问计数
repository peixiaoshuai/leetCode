题目描述：
  一个网站域名，如"discuss.leetcode.com"，包含了多个子域名。作为顶级域名，常用的有"com"，下一级则有"leetcode.com"，
  最低的一级为"discuss.leetcode.com"。当我们访问域名"discuss.leetcode.com"时，也同时访问了其父域名"leetcode.com"以及顶级域名 "com"。
  给定一个带访问次数和域名的组合，要求分别计算每个域名被访问的次数。其格式为访问次数+空格+地址，例如："9001 discuss.leetcode.com"。
  接下来会给出一组访问次数和域名组合的列表cpdomains 。要求解析出所有域名的访问次数，输出格式和输入格式相同，不限定先后顺序。
  示例 1:
    输入: 
    ["9001 discuss.leetcode.com"]
    输出: 
    ["9001 discuss.leetcode.com", "9001 leetcode.com", "9001 com"]
    说明: 
    例子中仅包含一个网站域名："discuss.leetcode.com"。按照前文假设，子域名"leetcode.com"和"com"都会被访问，所以它们都被访问了9001次。
  示例 2
    输入: 
    ["900 google.mail.com", "50 yahoo.com", "1 intel.mail.com", "5 wiki.org"]
    输出: 
    ["901 mail.com","50 yahoo.com","900 google.mail.com","5 wiki.org","5 org","1 intel.mail.com","951 com"]
    说明: 
    按照假设，会访问"google.mail.com" 900次，"yahoo.com" 50次，"intel.mail.com" 1次，"wiki.org" 5次。
    而对于父域名，会访问"mail.com" 900+1 = 901次，"com" 900 + 50 + 1 = 951次，和 "org" 5 次。
解题思路：
  借助HashMap，域名为键，访问次数为值，先按空格分隔原始字符串，得到原始域名和访问次数，然后对原始域名按'逗号分割，得到域名分组，
  拼接域名分组，得到所有域名和相应的访问次数，将所有域名和访问次数都put到HashMap中，最后遍历HashMap，拼接出答案字符串即可。
  代码：
    class Solution {
      public List<String> subdomainVisits(String[] cpdomains) {
          Map<String,Integer> map = new HashMap<>();
      for (String cpdomain :cpdomains) {
        int number = Integer.valueOf(cpdomain.substring(0,cpdomain.indexOf(" ")));
        String s = cpdomain.substring(cpdomain.indexOf(" ")+1, cpdomain.length());
        if(map.containsKey(s)){
          int newNumber = map.get(s)+ number;
          map.put(s, newNumber);
        }else{
          map.put(s, number);
        }
        char[] cs = s.toCharArray();
        for (int i = cs.length -1; i > 0; i--) {
          if(cs[i] == '.'){
            String key = s.substring(i+1, s.length());
            if(map.containsKey(key)){
              int newNumber = map.get(key)+ number;
              map.put(key, newNumber);
            }else{
              map.put(key, number);
            }
          }
        }
      }
      List<String> list = new ArrayList<String>();
      for (String key : map.keySet()) {
        String  result = map.get(key) +" "+ key;
        list.add(result);
      }
      return list;
      }
  }
