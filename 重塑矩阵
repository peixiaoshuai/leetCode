题目描述：
  在MATLAB中，有一个非常有用的函数 reshape，它可以将一个矩阵重塑为另一个大小不同的新矩阵，但保留其原始数据。
  给出一个由二维数组表示的矩阵，以及两个正整数r和c，分别表示想要的重构的矩阵的行数和列数。
  重构后的矩阵需要将原始矩阵的所有元素以相同的行遍历顺序填充。
  如果具有给定参数的reshape操作是可行且合理的，则输出新的重塑矩阵；否则，输出原始矩阵。
  示例 1:
    输入: 
    nums = [[1,2],[3,4]]
    r = 1, c = 4
    输出: 
    [[1,2,3,4]]
    解释:
      行遍历nums的结果是 [1,2,3,4]。新的矩阵是 1 * 4 矩阵, 用之前的元素值一行一行填充新矩阵。
  示例 2:
    输入: 
    nums =  [[1,2], [3,4]]
    r = 2, c = 4
    输出: 
    [[1,2],[3,4]]
    解释:
      没有办法将 2 * 2 矩阵转化为 2 * 4 矩阵。 所以输出原矩阵。
解题思路：
  1.先将原二维数组转化成一维数组，再将一维数组转化成目标二维数据，其中r,c为二维数组的长高
  代码:
    class Solution {
      public int[][] matrixReshape(int[][] nums, int r, int c) {
         if(nums.length * nums[0].length  != r * c){
        return nums;
      }
      int[][] result = new int[r][c];
      int[] arr = new int[nums.length * nums[0].length];
      int index = 0;
      for (int i = 0; i < nums.length; i++) {
        for (int j = 0; j < nums[i].length; j++) {
          arr[index] = nums[i][j];
          index++;
        }
      }
      int index2 = 0;
      for (int i = 0; i < result.length; i++) {
        for (int j = 0; j < result[i].length; j++) {
          result[i][j] = arr[index2];
          index2++;
        }
      }
      return result;
      }
  }
  2.双指针
  代码：
    public static int[][] matrixReshape(int[][] nums,int r,int c){
      int[][] res = new int[r][c];
      int row = 0,col = 0;
      //如果r*c不等于矩阵的行*列,则不合理，返回原数组
      if(r*c!=nums.length*nums[0].length)
        return nums;
      for (int i = 0; i < nums.length; i++) {
        for (int j = 0; j < nums[0].length; j++) {
          if(col==c){
            row++;
            col = 0;
          }
          res[row][col++] = nums[i][j];
        }
      }
      return res;
    }
